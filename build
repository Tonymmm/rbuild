#!/bin/bash
#
# Copyright (C) Roman Rihter 2020
#

#
# Device settingss
#
BUILD_PATHS=("$HOME/ameizu" "$HOME/asamsung" "$HOME/asamsung" "$HOME/asamsung") # Paths to Android sources
ANDROID_VERSIONS=("7" "11" "11" "11")                                           # Android versions
DEVICE_TABLE=("m1721" "s3ve3gxx" "s3ve3gjv" "s3ve3gds")                         # Device codenames
#
# Fill this table like that:
# BUILD_PATHS=("device #1 path" "device #2 path")
# ANDROID_VERSIONS=("device #1 android version" "device #2 android version")
# DEVICE_TABLE=("device #1" "device #2")
#
# Say thanks to bash's power, structures? What is the structures?
#

#
# Lunch settings
#
ROM_LUNCH_PREFIXES=("lineage_")             # All ROMs lunch prefixes, e.g. aosp_, pixel_, lineage_, rr_, mokee_, ...
AVALIBLE_BUILD_VARIANTS=("eng" "userdebug") # All device build variants (eng, userdebug, user are avalible for LOS and AOSP.)

#
# Old Android building settings
#
TJAVA_HOME="/usr/lib/jvm/java-8-openjdk-amd64-old" # Old Google's prebuilt Java directory
PYTHON_VENV_DIR="$HOME/venv"                       # Python 2.7 virtual enviroment directory

#
# Additional build settings
#
DECREASE_JAVA_HEAP=true                            # Set to true if you have <8 GB of RAM

######################################

# Colors
fB="$(tput setaf 0)"
fr="$(tput setaf 1)"
fg="$(tput setaf 2)"
fy="$(tput setaf 3)"
fb="$(tput setaf 4)"
fm="$(tput setaf 5)"
fc="$(tput setaf 6)"
fw="$(tput setaf 7)"
bB="$(tput setab 0)"
br="$(tput setab 1)"
bg="$(tput setab 2)"
by="$(tput setab 3)"
bb="$(tput setab 4)"
bm="$(tput setab 5)"
bc="$(tput setab 6)"
bw="$(tput setab 7)"
tb="$(tput bold)"
td="$(tput dim)"
tue="$(tput smul)"
tud="$(tput rmul)"
trev="$(tput rev)"
tse="$(tput smso)"
tsd="$(tput rmso)"
trst="$(tput sgr0)"
beep="$(tput bel)"

function error() {
  return 1
}

function log() {
  if [ -z "$1" ] || [ -z "$2" ]; then
    echo "[undefined::log] Not enough arguments."
  fi

  if [ "$1" = "tag" ]; then
    LOG_TAG="$2"
    return 0
  fi

  echo -e $trst"[$LOG_TAG::$1] $2"$trst

  return 0
}

. /etc/init.d/functions

loge() { action "$(log $1 "$2")" error; }
logee() { action "$(log $1 "$2")" error; exit 1; }

function configurator() {
  for ((a=0;$a<${#DEVICE_TABLE[@]};a++)); do
    for ((b=0;$b<${#ROM_LUNCH_PREFIXES[@]};b++)); do
      for ((c=0;$c<${#AVALIBLE_BUILD_VARIANTS[@]};c++)); do
        ALLBUILDVARIANTS+=("${ROM_LUNCH_PREFIXES[$b]}${DEVICE_TABLE[$a]}-${AVALIBLE_BUILD_VARIANTS[$c]}")
      done
    done
  done

  for ((d=0;$d<${#ALLBUILDVARIANTS[@]};d++)); do
    echo $fy"Lunch item #$(expr $d + 1):$trst ${ALLBUILDVARIANTS[$d]}"$trst
  done
  echo
  echo $trst"Please, choose one:"$trst
  echo -n $fy"@bin/build> "$trst
  read choice
  [ -z "$choice" ] && logee config "No lunch item given."
  for ((d=0;$d<${#ALLBUILDVARIANTS[@]};d++)); do
    if [ "$choice" = "${ALLBUILDVARIANTS[$d]}" ] || [ "$(expr $choice - 1 2>/dev/null)" = "$d" ]; then
      CHOSENDEVICE="${ALLBUILDVARIANTS[$d]}"
      break
    fi
  done

  if [ -z $CHOSENDEVICE ]; then
    logee config "Lunch item $choice not found."
  fi
}

function configure() {
  echo $fy"Welcome!$trst Choose your lunch item, please:"$trst
  if [ -f $HOME/.build_device.last ]; then
    LASTDEVICE="$(cat $HOME/.build_device.last)"
    echo $fy"Last item:"$trst" $LASTDEVICE. Will we use it? (Y/n)"$trst
    echo -n $fy"@bin/build> "$trst
    read choice
    case "$choice" in
    n|N) echo $trst"Ok, let's$fy choose other item..."$trst
    configurator
    ;;
    *) CHOSENDEVICE="$LASTDEVICE"
    ;;
    esac
  else
    configurator
  fi

  echo "$CHOSENDEVICE" > $HOME/.build_device.last
  echo $trst"Item "$fy$CHOSENDEVICE$trst" was chosen."

  return 0
}

function setsrccfg() {
  for ((i=0;$i<${#DEVICE_TABLE[@]};i++)); do
    if [ "$(echo $CHOSENDEVICE | grep "${DEVICE_TABLE[$i]}" 2>/dev/null >/dev/null && echo $?)" = "0" ]; then
      DEVICEDIR="${BUILD_PATHS[$i]}"
      DEVICENAME="${DEVICE_TABLE[$i]}"
      DEVICEANDROID="${ANDROID_VERSIONS[$i]}"
      break
    fi
  done

  for ((i=0;$i<${#ROM_LUNCH_PREFIXES[@]};i++)); do
    if [ "$(echo $CHOSENDEVICE | grep "${ROM_LUNCH_PREFIXES[$i]}" 2>/dev/null >/dev/null && echo $?)" = "0" ]; then
      DEVICEPREFIX="${ROM_LUNCH_PREFIXES[$i]}"
      break
    fi
  done
}

function buildconfig() {
  [ ! -f $DEVICEDIR/build/envsetup.sh ] && logee build "envsetup.sh not found!"

  log config "Starting envsetup..."
  cd $DEVICEDIR && source build/envsetup.sh >/dev/null

  log config "Android version: $DEVICEANDROID"

  if [ $DEVICEANDROID -lt 8 ]; then
    log config "Fixing build..."
    export LC_ALL=C
    [ ! -d $PYTHON_VENV_DIR ] && logee build "Please create Python 2.7 virtualenv in $PYTHON_VENV_DIR."
    [ ! -d $TJAVA_HOME ] && logee build "Please install Google's Java into $TJAVA_HOME."
    source $PYTHON_VENV_DIR/bin/activate
    export ANDROID_JAVA_HOME=$TJAVA_HOME
    export JAVA_HOME=$ANDROID_JAVA_HOME
    export PATH="$JAVA_HOME/bin:$PATH"
    if [ "$1" != "boot" ]; then
        if [ $DECREASE_JAVA_HEAP = true ]; then
            log config "Target: ROM, fixing JACK..."
            $DEVICEDIR/prebuilts/sdk/tools/jack-admin kill-server >/dev/null 2>/dev/null
            export JACK_SERVER_VM_ARGUMENTS="-Dfile.encoding=UTF-8 -XX:+TieredCompilation -Xmx4G"
            export ANDROID_JACK_VM_ARGS="-Dfile.encoding=UTF-8 -XX:+TieredCompilation -Xmx4G"
            $DEVICEDIR/prebuilts/sdk/tools/jack-admin start-server >/dev/null 2>/dev/null
        fi
    else
        if [ $DECREASE_JAVA_HEAP = true ]; then
            log config "Target: Boot Image, skipped JACK server restart..."
            # to skip ninja regeneration
            export JACK_SERVER_VM_ARGUMENTS="-Dfile.encoding=UTF-8 -XX:+TieredCompilation -Xmx4G"
            export ANDROID_JACK_VM_ARGS="-Dfile.encoding=UTF-8 -XX:+TieredCompilation -Xmx4G"
        fi
    fi
  fi

  log config "Overwriting necessary build variables..."
  export USE_CCACHE=true
  export CCACHE_SIZE=50G
  [ ! -d $HOME/.cachebuild ] && mkdir $HOME/.cachebuild
  export CCACHE_DIR="$HOME/.cachebuild"
  if [ $DECREASE_JAVA_HEAP = true ] && [ "$1" != "boot" ]; then
    export _JAVA_OPTIONS="-Xmx4G"
  fi

  log config "Starting ccache..."
  ccache -M 50G >/dev/null || logee build "Failed starting ccache!"
}

function build() {
  log build "Eat a lunch..."
  cd $DEVICEDIR && lunch $CHOSENDEVICE || logee build "Failed eating lunch!"

  [ "$1" = "ic" ] && cd $DEVICEDIR && make installclean
  [ "$1" = "installclean" ] && cd $DEVICEDIR && make installclean
  if [ "$1" = "c" ] && [ $DEVICEANDROID -gt 10 ]; then
    cd $DEVICEDIR && rm -rf out
  elif [ "$1" = "c" ]; then
    cd $DEVICEDIR && make clean
  fi

  if [ "$1" != "setup" ]; then
    if [ "$1" = "boot" ]; then
      cd $DEVICEDIR && make bootimage -j24 || BUILDFAILED=1
    else
      cd $DEVICEDIR && make bacon -j8 || BUILDFAILED=1
    fi
  fi
}

function flash() {
    if (($#==2)); then
        FLASHTYPE="boot"
        if [ "$1" != "boot" ]; then
            FLASHTYPE="rom"
        fi

        ARG2="$2"
        [ "$2" = "flashonly" ] && ARG2=flash

        if [ "$ARG2" != "flash" ] && [ "$FLASHTYPE" != "rom" ] || [ ! -z $BUILDFAILED ]; then
            logee flash "Stop flash..."
        fi

        log flash "Start flashing..."

        if [ "$FLASHTYPE" = "boot" ]; then
            DEVNOTFOUND=0
            DEVICEMODE="android"
            if [ "$(adb get-state 2>/dev/null)" != "device" ]; then
                if [ -z "$(fastboot devices 2>/dev/null)" ]; then
                    loge flash "Device not found. (Fastboot)"
                    log flash "Please connect device with booted Android/fastboot and press ENTER."
                    read abc
                    if [ "$(adb get-state 2>/dev/null)" != "device" ]; then
                        loge flash "Device not found. (Android)"
                        DEVNOTFOUND=1
                    fi
                    if [ -z "$(fastboot devices 2>/dev/null)" ]; then
                        if [ $DEVNOTFOUND = 1 ]; then
                            logee flash "Device not found. (Fastboot)"
                        fi
                    fi
                else
                    DEVICEMODE="fastboot"
                fi
            fi

            if [ $DEVICEMODE = android ]; then
                log flash "Rebooting to bootloader..."
                adb reboot bootloader >/dev/null 2>/dev/null
            fi

            for ((total=0;$total<20;total++)); do
                if [ ! -z "$(fastboot devices)" ]; then
                    log flash "Reached target 'bootloader' in $total seconds."
                    fastboot flash boot $DEVICEDIR/out/target/product/$DEVICENAME/boot.img >/dev/null 2>/dev/null || logee flash "Error on flashing."
                    fastboot reboot >/dev/null 2>/dev/null || logee flash "Error on reboot."
                    log flash "Reached target 'flash_success'."
                    break
                fi

                if [ $total = 19 ]; then
                    logee flash "Failed to enter fastboot in 20 seconds."
                fi

                sleep 1
            done
        elif [ "$FLASHTYPE" = "rom" ]; then
            DEVNOTFOUND=0
            DEVICEMODE="android"
            if [ "$(adb get-state 2>/dev/null)" != "device" ]; then
                if [ "$(adb get-state 2>/dev/null)" != "recovery" ]; then
                    loge flash "Device not found. (Recovery, Android)"
                    log flash "Please connect device with booted Android/recovery and press ENTER."
                    read abc
                    if [ "$(adb get-state 2>/dev/null)" != "device" ]; then
                        loge flash "Device not found. (Android)"
                        DEVNOTFOUND=1
                    fi
                    if [ "$(adb get-state 2>/dev/null)" != "recovery" ]; then
                        if [ $DEVNOTFOUND = 1 ]; then
                            logee flash "Device not found. (Recovery)"
                        fi
                    fi
                else
                    DEVICEMODE="recovery"
                fi
            fi

            if [ $DEVICEMODE = android ]; then
                log flash "Rebooting to recovery..."
                adb reboot recovery >/dev/null 2>/dev/null
            fi

            for ((total=0;$total<20;total++)); do
                if [ "$(adb get-state 2>/dev/null)" = "recovery" ]; then
                    log flash "Reached target 'recovery::uploadROM' in ~$total seconds."
                    adb push $(ls $DEVICEDIR/out/target/product/$DEVICENAME/$DEVICEPREFIX$DEVICENAME-ota*) /sdcard/flash.zip >/dev/null 2>/dev/null
                    log flash "Reached target 'recovery::createORS'."
                    adb shell "echo 'install /sdcard/flash.zip' > /cache/recovery/openrecoveryscript && echo 'reboot' >> /cache/recovery/openrecoveryscript" >/dev/null 2>/dev/null
                    log flash "Reached target 'recovery::flashByOTA'."
                    adb reboot recovery >/dev/null 2>/dev/null
                    log flash "Reached target 'flashing'."
                    break
                fi

                if [ $total = 59 ]; then
                    logee flash "Failed to enter recovery in 60 seconds."
                fi

                sleep 1
            done

            adb get-state 2>/dev/null
        fi

        for ((i=0;$i<300;i++)); do
            if [ "$(adb get-state 2>/dev/null)" = "device" ]; then
                [ -z $BOOTREACHED ] && log flash "Reached target 'boot' in $i seconds. (Flash time: ~$total seconds)" && BOOTREACHED=1
                if [ "$(adb shell getprop sys.boot_completed)" = "1" ]; then
                    log flash "Reached target 'boot_completed' in $i seconds, take log... (Flash time: ~$total seconds)"
                    adb logcat -b all -d > $DEVICEDIR/logcat.txt || logee flash "Error on taking logcat."
                    atom $DEVICEDIR/logcat.txt
                    exit 0
                fi
            fi

            sleep 1
            ((total++))
        done
    fi
}

[ -z "$1" ] && echo $fb"Note:$fw Avalible arguments:$fy c, ic, setup, boot"$trst
log tag "@bin/build"
configure
setsrccfg
[ "$2" = "flashonly" ] && ONLYFLASH=1 || ONLYFLASH=0
[ $ONLYFLASH != 1 ] && buildconfig "$1"
[ $ONLYFLASH != 1 ] && build "$1"
flash "$1" "$2"
